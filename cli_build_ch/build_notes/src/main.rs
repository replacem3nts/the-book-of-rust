// <----------------- Accepting Command Line Arguments ----------------->

// First task is to make minigrep accept two arguments: 1. the file path and
// 2. the string to search for

// We'd like to be able to run our program as shown below:

// ---------------------------
// $ cargo run -- searchstring example-filename.txt
// ---------------------------

// The program generated by 'cargo new' does not process arguments out of the
// box, there are crates you can find for that, but for now we'll implement
// the capability ourselves

// <----------------- Reading Argument Values ----------------->

// For our program to read CL args we needs the 'std::env::args'*** function
// This function returns an iterator of the CL args passed to the fn

// ***NOTE: std::env::args will panic if any argument contains invalid Unicode

// Iterators are next chapter, but for now: iterators produce a series of values
// and we can call the 'collect' method on an iterator to turn it into a collection
// (such as a vector) that contains all the elements the iterator produces

// Output so far:

// ---------------------------
// cargo run -- needle haystack
//     Finished dev [unoptimized + debuginfo] target(s) in 0.02s
//      Running `target/debug/minigrep needle haystack`
// [src/main.rs:5] args = [
//     "target/debug/minigrep", <--FIRST VALUE of vector is name of our binary
//     "needle",
//     "haystack",
// ]
// ---------------------------

// <----------- Saving the Argument Values in Variables ----------->
// We will simply assign references to the values in each of the vector locations
// query at index 1 (binary name is at 0), file path at index 2

// <----------- Reading a File ----------->


fn main() {
    println!("Hello, world!");
}
