fn main() {
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    let s3 = s1 + &s2; //s1 cannot be used again since ownership has passed to s3
    println!("this is string 3: {s3}");
}


// "+" operator has a method like the following: fn add(self, s: &str) -> String {
// the variable preceeding the operator is self, and after is a reference

// -->> there is a gotcha in the code above:
// the "add" function takes an &str vs. a String, but the function compiles properly
// because the compiler can coerce a String into a &str

// for concatenating multiple strings, the format! Macro is recommended as seen below:

// fn main() {
//     let s1 = String::from("tic");
//     let s2 = String::from("tac");
//     let s3 = String::from("toe");

//     let s = format!("{s1}-{s2}-{s3}");
//     println!("this is string: {s}");
// }

// NOTE: the code generated by the "format!" macro uses references to the underlying
// Strings, so it does not take ownership.
